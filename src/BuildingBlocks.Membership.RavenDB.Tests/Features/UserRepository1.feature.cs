// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.1.84
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BuildingBlocks.Membership.RavenDB.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.1.84")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("хранилище учетных записей пользователей")]
    [NUnit.Framework.CategoryAttribute("ravendb")]
    public partial class ХранилищеУчетныхЗаписейПользователейFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UserRepository.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "хранилище учетных записей пользователей", "", ProgrammingLanguage.CSharp, new string[] {
                        "ravendb"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "имя",
                        "email"});
            table1.AddRow(new string[] {
                        "Сидоров",
                        "Сидоров@outlook.com"});
            table1.AddRow(new string[] {
                        "Петров",
                        "Петров@mail.ru"});
            table1.AddRow(new string[] {
                        "Иванов",
                        "Иванов@gmail.com"});
#line 6
testRunner.Given("существуют пользователи", ((string)(null)), table1, "Пусть ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("проверка существования пользователя по имени")]
        [NUnit.Framework.TestCaseAttribute("Иванов", "существует", null)]
        [NUnit.Framework.TestCaseAttribute("Петров", "существует", null)]
        [NUnit.Framework.TestCaseAttribute("Сидоров", "существует", null)]
        [NUnit.Framework.TestCaseAttribute("Медведев", "не существует", null)]
        public virtual void ПроверкаСуществованияПользователяПоИмени(string имя, string существует, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("проверка существования пользователя по имени", exampleTags);
#line 12
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 13
 testRunner.When(string.Format("проверяют что пользователь с именем \"{0}\" существует", имя), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 14
 testRunner.Then(string.Format("результат проверки признает что пользователь \"{0}\"", существует), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("проверка существования пользователя по email")]
        [NUnit.Framework.TestCaseAttribute("Иванов@gmail.com", "существует", null)]
        [NUnit.Framework.TestCaseAttribute("Петров@mail.ru", "существует", null)]
        [NUnit.Framework.TestCaseAttribute("Сидоров@outlook.com", "существует", null)]
        [NUnit.Framework.TestCaseAttribute("Иванов@mail.ru", "не существует", null)]
        public virtual void ПроверкаСуществованияПользователяПоEmail(string email, string существует, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("проверка существования пользователя по email", exampleTags);
#line 22
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 23
 testRunner.When(string.Format("проверяют что пользователь с email \"{0}\" существует", email), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 24
 testRunner.Then(string.Format("результат проверки признает что пользователь \"{0}\"", существует), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("поиск пользователей по списку имен")]
        public virtual void ПоискПользователейПоСпискуИмен()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("поиск пользователей по списку имен", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "имя"});
            table2.AddRow(new string[] {
                        "Путин"});
            table2.AddRow(new string[] {
                        "Иванов"});
            table2.AddRow(new string[] {
                        "Петров"});
#line 33
 testRunner.When("получают список пользователей содержащих имена", ((string)(null)), table2, "Когда ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "имя"});
            table3.AddRow(new string[] {
                        "Иванов"});
            table3.AddRow(new string[] {
                        "Петров"});
#line 38
 testRunner.Then("возвращается следующий список пользователей", ((string)(null)), table3, "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("поиск пользователя по email")]
        public virtual void ПоискПользователяПоEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("поиск пользователя по email", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 44
 testRunner.When("ищут пользователя с email \"Сидоров@outlook.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "имя"});
            table4.AddRow(new string[] {
                        "Сидоров"});
#line 45
 testRunner.Then("возвращается следующий список пользователей", ((string)(null)), table4, "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("поиск пользователя по не существующему email")]
        public virtual void ПоискПользователяПоНеСуществующемуEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("поиск пользователя по не существующему email", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 50
 testRunner.When("ищут пользователя с email \"Сидоров@outlook.net\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 51
 testRunner.Then("не возвращается ни одного пользователя", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("поиск пользователя по Id")]
        public virtual void ПоискПользователяПоId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("поиск пользователя по Id", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 54
 testRunner.Given("пользователь \"Сидоров\" имеет Id \"94BB18FA-5198-4445-88A0-4475A7A715FC\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Пусть ");
#line 55
 testRunner.When("ищут пользователя с Id \"94BB18FA-5198-4445-88A0-4475A7A715FC\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "имя"});
            table5.AddRow(new string[] {
                        "Сидоров"});
#line 56
 testRunner.Then("возвращается следующий список пользователей", ((string)(null)), table5, "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("поиск пользователя по не существующему Id")]
        public virtual void ПоискПользователяПоНеСуществующемуId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("поиск пользователя по не существующему Id", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 61
 testRunner.Given("пользователь \"Сидоров\" имеет Id \"94BB18FA-5198-4445-88A0-4475A7A715FC\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Пусть ");
#line 62
 testRunner.When("ищут пользователя с Id \"6D4DA51A-FCF3-4343-B63D-E20468F90B0B\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 63
 testRunner.Then("не возвращается ни одного пользователя", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("постраничная загрузка пользователей соответствующих части email")]
        [NUnit.Framework.TestCaseAttribute("kreml.uc", "4", "3", null)]
        [NUnit.Framework.TestCaseAttribute("", "8", "3", null)]
        public virtual void ПостраничнаяЗагрузкаПользователейСоответствующихЧастиEmail(string фильтр, string всего, string наСтранице, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("постраничная загрузка пользователей соответствующих части email", exampleTags);
#line 65
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "имя",
                        "email"});
            table6.AddRow(new string[] {
                        "Медведев",
                        "Сидоров@kreml.uc"});
            table6.AddRow(new string[] {
                        "Медведева",
                        "Петров@kreml.uc"});
            table6.AddRow(new string[] {
                        "Путин",
                        "Путин@kreml.uc"});
            table6.AddRow(new string[] {
                        "Кабаева",
                        "Кабаева@kreml.uc"});
            table6.AddRow(new string[] {
                        "Сабчак",
                        "Сабчак@mail.ru"});
#line 66
 testRunner.Given("существуют пользователи", ((string)(null)), table6, "Пусть ");
#line 73
 testRunner.When(string.Format("загружают 1 страницу пользоватлей по 3 пользователя с фильтром по email \"{0}\"", фильтр), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "всего",
                        "на странице"});
            table7.AddRow(new string[] {
                        string.Format("{0}", всего),
                        string.Format("{0}", наСтранице)});
#line 74
 testRunner.Then("возвращается страница пользователей", ((string)(null)), table7, "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("постраничная загрузка пользователей соответствующих части имени")]
        [NUnit.Framework.TestCaseAttribute("едве", "4", "3", null)]
        [NUnit.Framework.TestCaseAttribute("", "8", "3", null)]
        public virtual void ПостраничнаяЗагрузкаПользователейСоответствующихЧастиИмени(string фильтр, string всего, string наСтранице, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("постраничная загрузка пользователей соответствующих части имени", exampleTags);
#line 82
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "имя"});
            table8.AddRow(new string[] {
                        "Медведев"});
            table8.AddRow(new string[] {
                        "Медведева"});
            table8.AddRow(new string[] {
                        "Медвед"});
            table8.AddRow(new string[] {
                        "Медведица"});
            table8.AddRow(new string[] {
                        "Сабчак"});
#line 83
 testRunner.Given("существуют пользователи", ((string)(null)), table8, "Пусть ");
#line 90
 testRunner.When(string.Format("загружают 1 страницу пользоватлей по 3 пользователя с фильтром по имени \"{0}\"", фильтр), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "всего",
                        "на странице"});
            table9.AddRow(new string[] {
                        string.Format("{0}", всего),
                        string.Format("{0}", наСтранице)});
#line 91
 testRunner.Then("возвращается страница пользователей", ((string)(null)), table9, "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("постраничная загрузка пользователей")]
        public virtual void ПостраничнаяЗагрузкаПользователей()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("постраничная загрузка пользователей", ((string[])(null)));
#line 99
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "имя"});
            table10.AddRow(new string[] {
                        "Медведев"});
            table10.AddRow(new string[] {
                        "Медведева"});
            table10.AddRow(new string[] {
                        "Медвед"});
            table10.AddRow(new string[] {
                        "Медведица"});
            table10.AddRow(new string[] {
                        "Сабчак"});
#line 100
 testRunner.Given("существуют пользователи", ((string)(null)), table10, "Пусть ");
#line 107
 testRunner.When("загружают 1 страницу пользоватлей по 3 пользователя", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "всего",
                        "на странице"});
            table11.AddRow(new string[] {
                        "8",
                        "3"});
#line 108
 testRunner.Then("возвращается страница пользователей", ((string)(null)), table11, "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
